apply plugin: 'com.android.library'
//  ButterKnife 的插件
/*
    ButterKnife 的插件作用是：生成一个R2 这样的一个类，那这个类就是用来生成我们视图绑定的
    所需要的唯一 Id ，因为这个R 也就是我们android的资源类，他只会在application module里面，才能
    被使用，而ButterKnife 又要偏偏使用这个唯一的一个Id资源， 所以就有一个大神 开发了一款 AndroidStudio
    的插件，通过R来生成相应的 R 资源文件，那我们绑定视图的时候，就可以直接使用R2.id 这样的形式来访问他。

    可以了解一下

        ---Android 资源中文件权限访问机制，就能明白为什么ButterKnife 是怎样运转了的。
 */
apply plugin: 'com.jakewharton.butterknife'
/**
 * 核心库
 */
android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    //api 代表 这个项目只要导入这个module，就可以使用这些依赖，而不用去重新导入依赖。
    api fileTree(include: ['*.jar'], dir: 'libs')
    api 'com.android.support:appcompat-v7:28.0.0'
    api 'com.android.support.constraint:constraint-layout:1.1.3'
    api 'junit:junit:4.12'
    api 'com.android.support.test:runner:1.0.2'
    api 'com.android.support.test.espresso:espresso-core:3.0.2'
    api 'com.android.support:cardview-v7:28.0.0'
    api project(':latte_annotations')

    //字体图标

    //因为这个库的版本 和当前 项目的版本不兼容，所以加入

    //exclude group:表示只要包含com.android.support的都排除
    api('com.joanzapata.iconify:android-iconify-ionicons:2.2.2') {
        exclude group: 'com.android.support'
    }
    api('com.joanzapata.iconify:android-iconify-fontawesome:2.2.2') {
        exclude group: 'com.android.support'
    }

    //Fragment 依赖
    api 'me.yokeyword:fragmentation:1.0.3'

    //在边缘上滑动可以回到上一个界面

    //noinspection GradleDependency
    api 'me.yokeyword:fragmentation-swipeback:1.0.3'

    //ButterKnife 依赖

    /*
         *  当Gradle 升级到3.0 以后会和 ButterKnife 产生冲突。
         *  Gradle 3.0以上支持的ButterKnife版本 为8.4.0，所以将版本改为8.4.0即可
         *
         *  annotationProcessor 代码生成器，使用注解可以帮助我们生成一个类。
         */

    //noinspection GradleDependency
    api 'com.jakewharton:butterknife:8.4.0'

    //noinspection GradleDependency
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.4.0'

    //网络请求依赖
    api 'com.squareup.okhttp3:okhttp:3.12.0'
    api 'com.squareup.retrofit2:retrofit:2.3.0'
    api 'com.squareup.retrofit2:converter-scalars:2.3.0'

    //Loading 依赖
    api 'com.wang.avi:library:2.1.3'

    //Rxjava
    implementation 'io.reactivex.rxjava2:rxjava:2.2.8'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'

    //ConvenientBanner 依赖

    /**
     * 通用的 图片轮播控件，支持无线循环，可以设置自动翻页 和时间，并提供多种特效。
     */
    api 'com.bigkoo:ConvenientBanner:2.1.4'

    //JSON 依赖
    api 'com.alibaba:fastjson:1.2.31'

    //JSON 依赖 这个是 Android优化的
    api 'com.alibaba:fastjson:1.2.31.android'

    //design
    api 'com.android.support:design:28.0.0'

    //数据库依赖
    api 'org.greenrobot:greendao-generator:3.2.2'
    api 'org.greenrobot:greendao:3.2.2'

    /*
                微信依赖 + 这个+ 表示Gradle 选择自身的最高版本，其实不推荐这样玩的
            也许我们的产品依赖于某个库的上一个版本
                加上这一行注释
                //noinspection GradleDynamicVersion
                意思是说，告诉我们的AndroidStudio 不用在检查他了，我们正常使用，我们知道我们要做什么
         */

    //微信依赖(包含统计)

    //noinspection GradleDynamicVersion
    api 'com.tencent.mm.opensdk:wechat-sdk-android-with-mta:+'

    //RecyclerView 的适配器依赖

    //noinspection GradleDynamicVersion
    api 'com.github.CymChad:BaseRecyclerViewAdapterHelper:+'

    //RecyclerView 分割线
    api 'com.choices.divider:RecyclerView_Divider:1.0.0'

    //加载图片 的依赖

    /*
                图片处理 —— 添加依赖，可以让gilde使用 okhttp3的网络层
            这样在网络上面的话可以进行一些优化和加速
                4.0.0 包括自由的进行model 的扩展

         */
    api 'com.github.bumptech.glide:glide:4.9.0'

    //沉浸式状态栏
    api('com.github.niorgai:StatusBarCompat:2.1.3', {
        exclude group: 'com.android.support'
    })

    //Google AutoValue

    //provided ：表示这里面的代码是在编译期使用的，在apk打包完成后 这里面的代码将被废弃

    //compileOnly :provided 已经过时 被compileOnly取代

    //noinspection GradleDependency
    compileOnly 'com.google.auto.value:auto-value:1.2'

    //noinspection GradleDependency
    annotationProcessor 'com.google.auto.value:auto-value:1.2'

    //图片圆形化
    api 'de.hdodenhof:circleimageview:2.1.0'

    /*
            图片剪裁：非常强大的一个库，有两种引入方式，
                1，轻量级的：implementation 'com.github.yalantis:ucrop:2.2.3'
                2，重量级的：implementation 'com.github.yalantis:ucrop:2.2.3-native'
                使用重量级的 会使apk 增加1.5MB 左右的大小
         */
    implementation 'com.github.yalantis:ucrop:2.2.3-native'

    //动态权限的处理
    api('com.github.hotchemi:permissionsdispatcher:3.1.0') {
        exclude group: 'com.android.support'
    }
    annotationProcessor 'com.github.hotchemi:permissionsdispatcher-processor:3.1.0'

    //工具库，内部封装了Android 的常用功能
    api 'com.blankj:utilcode:1.23.7'


}
